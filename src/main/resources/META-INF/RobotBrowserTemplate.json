{"id":"RobotBrowserTemplate","robotType":"ROBOT","mainClass":"com.novayre.jidoka.robot.test.RobotBrowserTemplate","actions":["start","openBrowser","navigateToWeb","ReadAddQueue","clearqueue","QueueOperations","updateItemQueue","end"],"conditionalActions":["startUp","HasMoreItems","HasMoreSheets","RetryRequired"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Action \"start\".\n\t */\npublic void start() {\n    qmanager = server.getQueueManager();\n    queueCommons = new  QueueCommons();\n    excelDSRow = new  ExcelDSRow();\n    queueCommons.init(qmanager);\n    dataProvider = IJidokaDataProvider.getInstance(this, IJidokaDataProvider.Provider.EXCEL);\n    server.setNumberOfItems(1);\n}"},{"id":"openBrowser","implementation":"/**\n\t * Open Web Browser\n\t * @throws Exception\n\t */\npublic void openBrowser() throws Exception {\n    browserType = server.getParameters().get(\"Browser\");\n    // Select browser type\n    if (StringUtils.isBlank(browserType)) {\n        server.info(\"Browser parameter not present. Using the default browser CHROME\");\n        browser.setBrowserType(EBrowsers.CHROME);\n        browserType = EBrowsers.CHROME.name();\n    } else {\n        EBrowsers selectedBrowser = EBrowsers.valueOf(browserType);\n        browserType = selectedBrowser.name();\n        browser.setBrowserType(selectedBrowser);\n        server.info(\"Browser selected: \" + selectedBrowser.name());\n    }\n    // Set timeout to 60 seconds\n    browser.setTimeoutSeconds(60);\n    // Init the browser module\n    browser.initBrowser();\n    //This command is uses to make visible in the desktop the page (IExplore issue)\n    if (EBrowsers.INTERNET_EXPLORER.name().equals(browserType)) {\n        client.clickOnCenter();\n        client.pause(3000);\n    }\n    navigateToWeb();\n}"},{"id":"navigateToWeb","implementation":"/**\n\t * Navigate to Web Page\n\t * \n\t * @throws Exception\n\t */\npublic void navigateToWeb() throws Exception {\n    server.setCurrentItem(1, HOME_URL);\n    // Navegate to HOME_URL address\n    browser.navigate(HOME_URL);\n    // we save the screenshot, it can be viewed in robot execution trace page on the console\n    server.sendScreen(\"Screen after load page: \" + HOME_URL);\n    server.setCurrentItemResultToOK(\"Success\");\n}"},{"id":"ReadAddQueue","implementation":"/**\n\t * Read Excel and Add to Queue operations\n\t */\npublic void ReadAddQueue() throws Exception {\n    String fileNameInput = server.getParameters().get(\"RegionDatasource\");\n    Path inputFile = Paths.get(server.getCurrentDir(), fileNameInput);\n    String fileType = FilenameUtils.getExtension(inputFile.toString());\n    String sourceDir = inputFile.toString();\n    //\t\tFile sourceFile = new File(sourceDir);\n    //\t\tserver.info(\"sourceFile\"+ sourceFile);\n    excelFile = sourceDir;\n    server.info(\"Keyvaue: \" + excelFile);\n    selectedQueueID = queueCommons.createQueue(excelFile);\n    server.info(\"Queue ID: \" + selectedQueueID);\n    addItemsToQueue();\n    currentQueue = queueCommons.getQueueFromId(selectedQueueID);\n    server.info(\"queue name: \" + currentQueue);\n    if (currentQueue == null) {\n        server.debug(\"Queue not found\");\n        return;\n    }\n    server.setNumberOfItems(currentQueue.pendingItems());\n}"},{"id":"clearqueue","implementation":"/**\n\t * Method clear all items in the given queue\n\t */\npublic void clearqueue() {\n}"},{"id":"QueueOperations","implementation":"/**\n\t * Method will call corresponding methods based on queue operation\n\t */\npublic void QueueOperations() throws Exception {\n    server.info(\"Operations --\" + exr.getActions());\n    if (exr.getActions().contains(\"Click\")) {\n        Click(exr.getXpath().trim(), exr.getValue().trim());\n    } else if (exr.getActions().contains(\"Switch tab\")) {\n        NavigateTab(exr.getValue().trim());\n    } else if (exr.getActions().contains(\"SendKey\")) {\n        SendKeys(exr.getValue().trim());\n    } else if (exr.getActions().contains(\"URL\")) {\n        HOME_URL = exr.getValue().trim();\n        openBrowser();\n    } else if (exr.getActions().contains(\"Read\")) {\n        read(exr.getXpath().trim(), exr.getValue().trim());\n    } else if (exr.getActions().contains(\"Write\")) {\n        write(exr.getXpath().trim(), exr.getValue().trim());\n    } else if (exr.getActions().contains(\"Select\")) {\n        Select(exr.getXpath().trim(), exr.getValue().trim());\n    } else if (exr.getActions().contains(\"CopyDatatoExcel\")) {\n        Select(exr.getXpath().trim(), exr.getValue().trim());\n    } else if (exr.getActions().contains(\"UploadfilestoAppian\")) {\n    } else if (exr.getActions().contains(\"UpdateAppianDB\")) {\n    }\n}"},{"id":"updateItemQueue","implementation":"/*\n         * Update item queue. This method is a sample to show how toupdate the first\n         * element on the functional data map by adding the text \" - MODIFIED\"\n         *\n         * @throws JidokaQueueException the Jidoka queue exception\n         */\npublic void updateItemQueue() throws JidokaQueueException, InterruptedException {\n    Map<String, String> funcData = currentItemQueue.functionalData();\n    String firstKey = funcData.keySet().iterator().next();\n    try {\n        funcData.put(firstKey, funcData.get(firstKey) + \" - Completed\");\n        // release the item. The queue item result will be the same\n        ReleaseItemWithOptionalParameters rip = new  ReleaseItemWithOptionalParameters();\n        rip.functionalData(funcData);\n        // Is mandatory to set the current item result before releasing the queue item\n        server.setCurrentItemResultToOK(currentItemQueue.key());\n        qmanager.releaseItem(rip);\n    } catch (JidokaQueueException e) {\n        throw e;\n    } catch (Exception e) {\n        throw new  JidokaQueueException(e);\n    }\n}"},{"id":"end","implementation":"/**\n\t * Last action of the robot.\n\t */\npublic void end() {\n    server.info(\"End process\");\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"/**\n\t * Action \"startUp\".\n\t * <p>\n\t * This method is overrriden to initialize the Appian RPA modules instances.\n\t */\n@Override\npublic boolean startUp() throws Exception {\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    client = IClient.getInstance(this);\n    browser = IWebBrowserSupport.getInstance(this, client);\n    qmanager = server.getQueueManager();\n    exr = new  ExcelDSRow();\n    return IRobot.super.startUp();\n}"},{"id":"HasMoreItems","implementation":"/**\n\t * Method returns true if there are items in Queue\n\t */\npublic String HasMoreItems() throws Exception {\n    currentItemQueue = queueCommons.getNextItem(currentQueue);\n    if (currentItemQueue != null) {\n        // set the stats for the current item\n        server.setCurrentItem(currentItemIndex++, currentItemQueue.key());\n        //ExcelDSRow exr = new ExcelDSRow();\n        //server.info(\"first name\" + currentItemQueue.functionalData().get(TestPOC.First_Namne));\n        exr.setField_Name(currentItemQueue.functionalData().get(ExcelRowMapper.Field_Name));\n        exr.setXpath(currentItemQueue.functionalData().get(ExcelRowMapper.Xpath));\n        exr.setValue(currentItemQueue.functionalData().get(ExcelRowMapper.Value));\n        exr.setActions(currentItemQueue.functionalData().get(ExcelRowMapper.Actions));\n        server.info(\"Operations inhas no more items\" + exr.getActions());\n        return \"Yes\";\n    }\n    return \"No\";\n}"},{"id":"HasMoreSheets","implementation":"/**\n\t * Method returns true if there are data present in sheets\n\t */\npublic String HasMoreSheets() {\n    int sheetCount = dataProvider.getExcel().getWorkbook().getNumberOfSheets();\n    server.info(\"sheetCount\" + sheetCount);\n    if (count < sheetCount) {\n        count = count + 1;\n        return \"yes\";\n    }\n    return \"no\";\n}"},{"id":"RetryRequired","implementation":"/**\n\t * Method returns true if retry count is lesser than 3\n\t */\npublic String RetryRequired() {\n    String Flag = \"No\";\n    if (currentItemIndex == 10000) {\n        return \"yes\";\n    } else if (currentItemIndex == 10000) {\n        return \"MaxRetryReached\";\n    } else {\n        return \"No\";\n    }\n}"}],"sdkMethods":[]}