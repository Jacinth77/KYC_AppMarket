{"id":"RobotBrowserTemplate","robotType":"ROBOT","mainClass":"com.novayre.jidoka.robot.test.RobotBrowserTemplate","actions":["start","openBrowser","navigateToWeb","PerformOperation","updateItemQueue","setAppianData","end"],"conditionalActions":["startUp","HasMoreSheets","RetryRequired"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Action \"start\".\n\t */\npublic void start() {\n    qmanager = server.getQueueManager();\n    queueCommons = new  QueueCommons();\n    excelDSRow = new  ExcelDSRow();\n    queueCommons.init(qmanager);\n    dataProvider = IJidokaDataProvider.getInstance(this, IJidokaDataProvider.Provider.EXCEL);\n    server.setNumberOfItems(1);\n    excel = IExcel.getExcelInstance(this);\n}"},{"id":"openBrowser","implementation":"/**\n\t * Open Web Browser\n\t * @throws Exception\n\t */\npublic void openBrowser() throws Exception {\n    browserType = server.getParameters().get(\"Browser\");\n    // Select browser type\n    if (StringUtils.isBlank(browserType)) {\n        server.info(\"Browser parameter not present. Using the default browser CHROME\");\n        browser.setBrowserType(EBrowsers.CHROME);\n        browserType = EBrowsers.CHROME.name();\n    } else {\n        EBrowsers selectedBrowser = EBrowsers.valueOf(browserType);\n        browserType = selectedBrowser.name();\n        browser.setBrowserType(selectedBrowser);\n        server.info(\"Browser selected: \" + selectedBrowser.name());\n    }\n    // Set timeout to 60 seconds\n    browser.setTimeoutSeconds(60);\n    // Init the browser module\n    browser.initBrowser();\n    //This command is uses to make visible in the desktop the page (IExplore issue)\n    if (EBrowsers.INTERNET_EXPLORER.name().equals(browserType)) {\n        client.clickOnCenter();\n        client.pause(3000);\n    }\n    navigateToWeb();\n}"},{"id":"navigateToWeb","implementation":"/**\n\t * Navigate to Web Page\n\t * \n\t * @throws Exception\n\t */\npublic void navigateToWeb() throws Exception {\n    server.setCurrentItem(1, HOME_URL);\n    // Navegate to HOME_URL address\n    browser.navigate(HOME_URL);\n    // we save the screenshot, it can be viewed in robot execution trace page on the console\n    server.sendScreen(\"Screen after load page: \" + HOME_URL);\n    server.setCurrentItemResultToOK(\"Success\");\n}"},{"id":"PerformOperation","implementation":"/**\n\t * Read Excel and Add to Queue operations\n\n\n\tpublic void ReadAddQueue() throws Exception {\n\t\tString fileNameInput = server.getParameters().get(\"RegionDatasource\");\n\t\tPath inputFile = Paths.get(server.getCurrentDir(), fileNameInput);\n\t\tString fileType = FilenameUtils.getExtension(inputFile.toString());\n\t\tString sourceDir =inputFile.toString();\n//\t\tFile sourceFile = new File(sourceDir);\n//\t\tserver.info(\"sourceFile\"+ sourceFile);\n\n        excelFile = sourceDir;\n        server.info(\"Keyvaue: \" + excelFile );\n        selectedQueueID = queueCommons.createQueue(excelFile);\n        server.info(\"Queue ID: \" + selectedQueueID);\n        //addItemsToQueue();\n\n\t\tcurrentQueue = queueCommons.getQueueFromId(selectedQueueID);\n\n\t\tserver.info(\"queue name: \" + currentQueue);\n\n\t\tif (currentQueue == null) {\n\t\t\tserver.debug(\"Queue not found\");\n\t\t\treturn;\n\t\t}\n\n\t\tserver.setNumberOfItems(currentQueue.pendingItems());\n\t}*/\npublic void PerformOperation() throws Exception {\n    server.info(\"add items \");\n    String fileNameInput = server.getParameters().get(\"regionDatasource\");\n    Path inputFile = Paths.get(server.getCurrentDir(), fileNameInput);\n    String fileType = FilenameUtils.getExtension(inputFile.toString());\n    String sourceDir = inputFile.toString();\n    excelFile = sourceDir;\n    String fileInput = Paths.get(excelFile).toFile().toString();\n    Sheetname = \"Datasource\" + CurrentSheetCount;\n    dataProvider = IJidokaDataProvider.getInstance(this, IJidokaDataProvider.Provider.EXCEL);\n    dataProvider.init(fileInput, Sheetname, FIRST_ROW, new  ExcelRowMapper());\n    try {\n        // Get the next row, each row is a item\n        while (dataProvider.nextRow()) {\n            ExcelDSRow exr = dataProvider.getCurrentItem();\n            server.info(\"Operations --\" + exr.getActions());\n            if ((exr.getActions().contains(\"endIf\")) || (IfFlag)) {\n                if (exr.getActions().contains(\"Click\")) {\n                    Click(exr.getXpath().trim(), exr.getValue().trim());\n                } else if (exr.getActions().contains(\"Switch tab\")) {\n                    NavigateTab(exr.getValue().trim());\n                } else if (exr.getActions().contains(\"SendKey\")) {\n                    SendKeys(exr.getValue().trim());\n                } else if (exr.getActions().contains(\"URL\")) {\n                    HOME_URL = exr.getValue().trim();\n                    openBrowser();\n                } else if (exr.getActions().contains(\"Read\")) {\n                    read(exr.getXpath().trim(), exr.getValue().trim());\n                } else if (exr.getActions().contains(\"Write\")) {\n                    write(exr.getXpath().trim(), exr.getValue().trim());\n                } else if (exr.getActions().contains(\"Select\")) {\n                    Select(exr.getXpath().trim(), exr.getValue().trim());\n                } else if (exr.getActions().contains(\"Wait\")) {\n                    Waittime(Integer.parseInt(exr.getValue().trim()));\n                } else if (exr.getActions().contains(\"CopyDatatoExcel\")) {\n                    CopyDatatoExcel();\n                } else if (exr.getActions().contains(\"SetFilePath\")) {\n                    getFileLocation(exr.getValue().trim());\n                } else if (exr.getActions().contains(\"IfLesser\")) {\n                    iflesser(exr.getValue().trim());\n                } else if (exr.getActions().contains(\"IfGreater\")) {\n                    ifGreater(exr.getValue().trim());\n                } else if (exr.getActions().contains(\"IfEqual\")) {\n                    ifEqual(exr.getValue().trim());\n                } else if (exr.getActions().contains(\"endIf\")) {\n                    IfFlag = true;\n                }\n            }\n        }\n    } catch (Exception e) {\n        server.info(e);\n        this.browserCleanUp();\n        exceptionflag = true;\n    } finally {\n        try {\n            // Close the excel file\n            dataProvider.close();\n        } catch (IOException e) {\n            dataProvider.flush();\n        }\n    }\n}"},{"id":"updateItemQueue","implementation":"/**\n\t * Method will call corresponding methods based on queue operation\n\n\n\tpublic void  QueueOperations() throws Exception {\n\n\n        server.info(\"Operations --\"+exr.getActions());\n\n        if (exr.getActions().contains(\"Click\") ) {\n            Click(exr.getXpath().trim(), exr.getValue().trim());\n        } else if (exr.getActions().contains(\"Switch tab\")) {\n            NavigateTab(exr.getValue().trim());\n        } else if (exr.getActions().contains(\"SendKey\")) {\n            SendKeys(exr.getValue().trim());\n        } else if (exr.getActions().contains(\"URL\") ) {\n            HOME_URL = exr.getValue().trim();\n            openBrowser();\n        } else if (exr.getActions().contains(\"Read\")) {\n            read(exr.getXpath().trim(), exr.getValue().trim());\n\n        } else if (exr.getActions().contains(\"Write\") ) {\n            write(exr.getXpath().trim(), exr.getValue().trim());\n\n        } else if (exr.getActions().contains(\"Select\")) {\n\n            Select(exr.getXpath().trim(), exr.getValue().trim());\n\n        } else if (exr.getActions().contains(\"CopyDatatoExcel\")) {\n\n            CopyDatatoExcel(exr.getValue().trim());\n\n        } else if (exr.getActions().contains(\"UploadfilestoAppian\")) {\n\n\n        } else if (exr.getActions().contains(\"UpdateAppianDB\")) {\n\n\n        }\n    }\n\n        /*\n         * Update item queue. This method is a sample to show how toupdate the first\n         * element on the functional data map by adding the text \" - MODIFIED\"\n         *\n         * @throws JidokaQueueException the Jidoka queue exception\n         */\npublic void updateItemQueue() throws JidokaQueueException, InterruptedException {\n    Map<String, String> funcData = currentItemQueue.functionalData();\n    String firstKey = funcData.keySet().iterator().next();\n    try {\n        funcData.put(firstKey, funcData.get(firstKey) + \" - Completed\");\n        // release the item. The queue item result will be the same\n        ReleaseItemWithOptionalParameters rip = new  ReleaseItemWithOptionalParameters();\n        rip.functionalData(funcData);\n        // Is mandatory to set the current item result before releasing the queue item\n        server.setCurrentItemResultToOK(currentItemQueue.key());\n        qmanager.releaseItem(rip);\n    } catch (JidokaQueueException e) {\n        throw e;\n    } catch (Exception e) {\n        throw new  JidokaQueueException(e);\n    }\n}"},{"id":"setAppianData","implementation":"public void setAppianData() throws Exception {\n    String executionId = server.getExecution(0).getRobotName() + \"#\" + server.getExecution(0).getCurrentExecution().getExecutionNumber();\n    Map<String, IRobotVariable> variables = server.getWorkflowVariables();\n    IRobotVariable dID = variables.get(\"documentID\");\n    dID.setValue(documentId);\n    IRobotVariable execId = variables.get(\"executionId\");\n    execId.setValue(executionId);\n    IRobotVariable sourceType = variables.get(\"sourceType\");\n    sourceType.setValue(Sheetname);\n    IRobotVariable caseId = variables.get(\"caseid\");\n    Integer caseidInt = Integer.parseInt(server.getParameters().get(\"caseId\").toString());\n    caseId.setValue(caseidInt);\n    IRobotVariable status = variables.get(\"status\");\n    if (maxCountReached.contains(\"MaxCountReached\")) {\n        status.setValue(\"Failed\" + Sheetname);\n    } else {\n        status.setValue(\"Success\");\n    }\n}"},{"id":"end","implementation":"/**\n\t * Last action of the robot.\n\t */\npublic void end() {\n    browserCleanUp();\n    server.info(\"End process\");\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"/**\n\t * Action \"startUp\".\n\t * <p>\n\t * This method is overrriden to initialize the Appian RPA modules instances.\n\t */\n@Override\npublic boolean startUp() throws Exception {\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    client = IClient.getInstance(this);\n    browser = IWebBrowserSupport.getInstance(this, client);\n    qmanager = server.getQueueManager();\n    return IRobot.super.startUp();\n}"},{"id":"HasMoreSheets","implementation":"/**\n\t * Method returns true if there are items in Queue\n\n\n\tpublic String HasMoreItems() throws Exception {\n\t\tcurrentItemQueue = queueCommons.getNextItem(currentQueue);\n\n\t\tif (currentItemQueue != null) {\n\n\t\t\t// set the stats for the current item\n\t\t\tserver.setCurrentItem(currentItemIndex++, currentItemQueue.key());\n\t\t\t//ExcelDSRow exr = new ExcelDSRow();\n\t\t\t//server.info(\"first name\" + currentItemQueue.functionalData().get(TestPOC.First_Namne));\n\t\t\texr.setField_Name(currentItemQueue.functionalData().get(ExcelRowMapper.Field_Name));\n\t\t\texr.setXpath(currentItemQueue.functionalData().get(ExcelRowMapper.Xpath));\n\t\t\texr.setValue(currentItemQueue.functionalData().get(ExcelRowMapper.Value));\n\t\t\texr.setActions(currentItemQueue.functionalData().get(ExcelRowMapper.Actions));\n\n\t\t\tserver.info(\"Operations inhas no more items\"+exr.getActions());\n\t\t\treturn \"Yes\";\n\t\t}\n\n\t\treturn \"No\";\n\t}\n\n\n\n\t/**\n\t * Method returns true if there are data present in sheets\n\t */\npublic String HasMoreSheets() {\n    server.info(\"Inside HasSheet Method\");\n    int sheetCount = dataProvider.getExcel().getWorkbook().getNumberOfSheets();\n    server.info(\"sheetCount\" + sheetCount);\n    if (CurrentSheetCount < sheetCount) {\n        CurrentSheetCount = CurrentSheetCount + 1;\n        return \"yes\";\n    }\n    return \"no\";\n}"},{"id":"RetryRequired","implementation":"/**\n\t * Method returns true if retry count is lesser than 3\n\t */\npublic String RetryRequired() {\n    if (exceptionflag) {\n        if (RetryCount < 3) {\n            RetryCount = RetryCount + 1;\n            return \"yes\";\n        } else {\n            maxCountReached = \"MaxCountReached\";\n            return maxCountReached;\n        }\n    } else {\n        return \"No\";\n    }\n}"}],"sdkMethods":[]}