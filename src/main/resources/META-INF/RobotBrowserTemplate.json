{"id":"RobotBrowserTemplate","robotType":"ROBOT","mainClass":"com.novayre.jidoka.robot.test.RobotBrowserTemplate","actions":["start","openBrowser","navigateToWeb","ReadAddQueue","clearqueue","QueueOperations","end"],"conditionalActions":["startUp","HasMoreItems","HasMoreSheets","RetryRequired"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Action \"start\".\n\t */\npublic void start() {\n    qmanager = server.getQueueManager();\n    queueCommons = new  QueueCommons();\n    excelDSRow = new  ExcelDSRow();\n    queueCommons.init(qmanager);\n    dataProvider = IJidokaDataProvider.getInstance(this, IJidokaDataProvider.Provider.EXCEL);\n    server.setNumberOfItems(1);\n}"},{"id":"openBrowser","implementation":"/**\n\t * Open Web Browser\n\t * @throws Exception\n\t */\npublic void openBrowser() throws Exception {\n    browserType = server.getParameters().get(\"Browser\");\n    // Select browser type\n    if (StringUtils.isBlank(browserType)) {\n        server.info(\"Browser parameter not present. Using the default browser CHROME\");\n        browser.setBrowserType(EBrowsers.CHROME);\n        browserType = EBrowsers.CHROME.name();\n    } else {\n        EBrowsers selectedBrowser = EBrowsers.valueOf(browserType);\n        browserType = selectedBrowser.name();\n        browser.setBrowserType(selectedBrowser);\n        server.info(\"Browser selected: \" + selectedBrowser.name());\n    }\n    // Set timeout to 60 seconds\n    browser.setTimeoutSeconds(60);\n    // Init the browser module\n    browser.initBrowser();\n    //This command is uses to make visible in the desktop the page (IExplore issue)\n    if (EBrowsers.INTERNET_EXPLORER.name().equals(browserType)) {\n        client.clickOnCenter();\n        client.pause(3000);\n    }\n}"},{"id":"navigateToWeb","implementation":"/**\n\t * Navigate to Web Page\n\t * \n\t * @throws Exception\n\t */\npublic void navigateToWeb() throws Exception {\n    server.setCurrentItem(1, HOME_URL);\n    // Navegate to HOME_URL address\n    browser.navigate(HOME_URL);\n    // we save the screenshot, it can be viewed in robot execution trace page on the console\n    server.sendScreen(\"Screen after load page: \" + HOME_URL);\n    server.setCurrentItemResultToOK(\"Success\");\n}"},{"id":"ReadAddQueue","implementation":"/**\n\t * Read Excel and Add to Queue operations\n\t */\npublic void ReadAddQueue() throws Exception {\n    String fileNameInput = server.getParameters().get(\"regionDatasource\");\n    Path inputFile = Paths.get(server.getCurrentDir(), fileNameInput);\n    String fileType = FilenameUtils.getExtension(inputFile.toString());\n    String sourceDir = inputFile.toString();\n    if (StringUtils.isBlank(qmanager.preselectedQueue())) {\n        excelFile = sourceDir;\n        server.info(\"Keyvaue: \" + excelFile);\n        selectedQueueID = queueCommons.createQueue(excelFile);\n        server.info(\"Queue ID: \" + selectedQueueID);\n        addItemsToQueue();\n    } else {\n        selectedQueueID = qmanager.preselectedQueue();\n        server.info(\"Selected queue ID: \" + selectedQueueID);\n    }\n    currentQueue = queueCommons.getQueueFromId(selectedQueueID);\n    server.info(\"queue name: \" + currentQueue);\n    if (currentQueue == null) {\n        server.debug(\"Queue not found\");\n        return;\n    }\n    server.setNumberOfItems(currentQueue.pendingItems());\n}"},{"id":"clearqueue","implementation":"/**\n\t * Method clear all items in the given queue\n\t */\npublic void clearqueue() {\n}"},{"id":"QueueOperations","implementation":"/**\n\t * Method will call corresponding methods based on queue operation\n\t */\npublic void QueueOperations() {\n}"},{"id":"end","implementation":"/**\n\t * Last action of the robot.\n\t */\npublic void end() {\n    server.info(\"End process\");\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"/**\n\t * Action \"startUp\".\n\t * <p>\n\t * This method is overrriden to initialize the Appian RPA modules instances.\n\t */\n@Override\npublic boolean startUp() throws Exception {\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    client = IClient.getInstance(this);\n    browser = IWebBrowserSupport.getInstance(this, client);\n    return IRobot.super.startUp();\n}"},{"id":"HasMoreItems","implementation":"/**\n\t * Method returns true if there are items in Queue\n\t */\npublic String HasMoreItems() throws Exception {\n    currentItemQueue = queueCommons.getNextItem(currentQueue);\n    if (currentItemQueue != null) {\n        // set the stats for the current item\n        server.setCurrentItem(currentItemIndex++, currentItemQueue.key());\n        ExcelDSRow exr = new  ExcelDSRow();\n        //server.info(\"first name\" + currentItemQueue.functionalData().get(TestPOC.First_Namne));\n        exr.setField_Name(currentItemQueue.functionalData().get(ExcelRowMapper.Field_Name));\n        exr.setXpath(currentItemQueue.functionalData().get(ExcelRowMapper.Xpath));\n        exr.setValue(currentItemQueue.functionalData().get(ExcelRowMapper.Value));\n        exr.setActions(currentItemQueue.functionalData().get(ExcelRowMapper.Actions));\n        return \"Yes\";\n    }\n    return \"No\";\n}"},{"id":"HasMoreSheets","implementation":"/**\n\t * Method returns true if there are data present in sheets\n\t */\npublic boolean HasMoreSheets() {\n    Boolean Flag = true;\n    return Flag;\n}"},{"id":"RetryRequired","implementation":"/**\n\t * Method returns true if retry count is lesser than 3\n\t */\npublic boolean RetryRequired() {\n    Boolean Flag = true;\n    return Flag;\n}"}],"sdkMethods":[]}